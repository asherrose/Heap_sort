#include<iostream>
#include<fstream>
using namespace std;

class HeapSort{
	private:
		int fatherIndex, leftKidIndex, rightKidIndex, minKidIndex;
	public:
		static int* heapAry;
		void buildHeap(string,string,int);
		void insertOneDataItem(int,int);
		void bubbleUp(int);
		bool isRoot(int);
		void printHeap(string);
		HeapSort(int);
		void deleteHeap(string,string);
		int getRoot();
		void deleteRoot();
		void bubbleDown(int);
		bool isLeaf(int);
		int findMinKidIndex(int,int);
};
void HeapSort::buildHeap(string in, string out1, int count){
	ifstream infile;
	infile.open(in);
	int num;
	while (infile >> num){
		int data=num;
		HeapSort::insertOneDataItem(data,count);
		int kidIndex=HeapSort::heapAry[0];
		HeapSort::bubbleUp(kidIndex);
		HeapSort::printHeap(out1);  
	}
	infile.close();
}
void HeapSort::insertOneDataItem(int data, int count){
	if (HeapSort::heapAry[0]==count) {
		cout<<"Array full"<<endl;
		return;
	}
	HeapSort::heapAry[(HeapSort::heapAry[0])+1]=data;
	HeapSort::heapAry[0]++;
}
void HeapSort::bubbleUp(int kidIndex){
	if (HeapSort::isRoot(kidIndex)) return;
	else {
		fatherIndex=kidIndex/2;
		if (HeapSort::heapAry[kidIndex] < HeapSort::heapAry[fatherIndex]){
			int temp = HeapSort::heapAry[kidIndex];
			HeapSort::heapAry[kidIndex]=HeapSort::heapAry[fatherIndex];
			HeapSort::heapAry[fatherIndex]=temp;
		}
		HeapSort::bubbleUp(fatherIndex);
	}
}
bool HeapSort::isRoot(int index){
	if (index==1) return true;
	else return false;
}
void HeapSort::printHeap(string out1){
	ofstream outfile;
	outfile.open(out1);
	for (int i=0; i<10; i++){
		outfile<<HeapSort::heapAry[i]<<endl;
	}
	outfile.close();
}
HeapSort::HeapSort(int count){
	fatherIndex=leftKidIndex=rightKidIndex=minKidIndex=0;
	HeapSort::heapAry = new int[count+1];
}
void HeapSort::deleteHeap(string out1, string out2){
	ofstream outfile;
	outfile.open(out2);
	while (HeapSort::heapAry[0]!=0){
		int data=HeapSort::getRoot();
		outfile<<data<<endl;
		HeapSort::deleteRoot();
		fatherIndex=1;
		HeapSort::bubbleDown(fatherIndex);
		HeapSort::printHeap(out1);
	}
	outfile.close();
}
int HeapSort::getRoot(){
	return HeapSort::heapAry[1];
}
void HeapSort::deleteRoot(){
	HeapSort::heapAry[1]=HeapSort::heapAry[HeapSort::heapAry[0]];
	HeapSort::heapAry[0]--;
}
void HeapSort::bubbleDown(int fatherIndex){
	if (HeapSort::isLeaf(fatherIndex)) return;
	else {
		leftKidIndex=fatherIndex*2;
		rightKidIndex=fatherIndex*2+1;
		minKidIndex=HeapSort::findMinKidIndex(leftKidIndex,rightKidIndex);
		if (HeapSort::heapAry[minKidIndex]<HeapSort::heapAry[fatherIndex]) {
			int temp = HeapSort::heapAry[fatherIndex];
			HeapSort::heapAry[fatherIndex]=HeapSort::heapAry[minKidIndex];
			HeapSort::heapAry[minKidIndex]=temp;
		}
		HeapSort::bubbleDown(minKidIndex);
	}
	
}
bool HeapSort::isLeaf(int index){
	leftKidIndex=index*2;
	rightKidIndex=index*2+1;
	if (leftKidIndex>HeapSort::heapAry[0] && rightKidIndex>HeapSort::heapAry[0]){
		return true;
	}
	else return false;
}
int HeapSort::findMinKidIndex(int leftKidIndex, int rightKidIndex){
	if (leftKidIndex>HeapSort::heapAry[0]) return rightKidIndex;
	else if (rightKidIndex>HeapSort::heapAry[0]) return leftKidIndex;
	else if (HeapSort::heapAry[leftKidIndex]<HeapSort::heapAry[rightKidIndex]) return leftKidIndex;
	else return rightKidIndex;
}
int* HeapSort::heapAry;

int main(int argc, char* argv[]){
	
	static int count=0;
	ifstream inFile(argv[1]);
	int num;
	while (inFile >> num){
		count++;
	}
	inFile.close();
	HeapSort hSort(count);
	HeapSort::heapAry[0]=0;
	hSort.buildHeap(argv[1],argv[2],count);
	hSort.deleteHeap(argv[2],argv[3]);
	
	return 0;
}
